---
# tasks file for k3s-server

# This role get's for the most part executed against the server in order to build it from scratch.
# Some of the operations that install helm charts get executed on the tools server technically since
# that's where kubectl and helm are installed.  Those items will be duly noted here and there will 
# have to be appropriate tags on all of the task.
#
# This role assumes that the master k3s server has at least given an IP address and can reach the internet

# Pass the user as an --extra-var to this playbook to detemine if rmengert or sdalton will be run

- name: Download k3s installer
  get_url:
    url: https://get.k3s.io
    dest: /tmp/k3s_install.sh
    mode: '0755'
  tags:
  - k3s_install 

- name: Run k3s installer
  script: /tmp/k3s_install.sh
  environment:
    K3S_KUBECONFIG_MODE: '644'
    INSTALL_K3S_EXEC: '--nodeploy servicelb --no-deploy traefik'
  tags:
  - k3s_install

- name: Install metallb via helm
  helm:
    host: localhost
    state: present
    name:  metallb
    namespace: kube-system
    chart:
      name: stable/metallb
      source:
        type: repo
        location: https://kubernetes-charts.storage.googleapis.com
    values:
      configInline:
        address-pools:
          - name: default
            protocol: layer2
            addresses: 192.168.1.128-192.168.1.254
  tags:
  - k3s_support


#- name: Install metallb via helm with the command module
#  command: >
#    helm install metallb stable/metallb --namespace kube-system 
#    --set configInline.address-pools[0].name=default 
#    --set configInline.address-pools[0].protocol=layer2 
#    --set configInline.address-pools[0].addresses[0]=192.168.1.128-192.168.1.254

- name: Download the custom resource definition for cert manager
  get_url:
    url: https://raw.githubusercontent.com/jetstack/cert-manager/release-0.14/deploy/manifests/00-crds.yaml
    dest: /tmp/00-crds.yaml
    mode: '0777'
  tags:
  - k3s_support

- name: Install custom resource definition for cert manager
  #? can this be done via the k8s module?  Not clear if that's just kubectl under the hood
  # looks like it can, trying that out - 
  # kubectl apply --validate=false -f https://raw.githubusercontent.com/jetstack/cert-manager/release-0.14/deploy/manifests/00-crds.yaml
  k8s:
    state: present
    api_version: v1
    apply: yes
    validate:
      fail_on_error: yes
      strict: no
    apply: yes
    resource_definition: "{{ lookup('file', '/tmp/00-crds.yaml ')}}"
  tags:
  - k3s_support

- name: Add jetstack repo to helm and update all helm repos
  # going to do this via the command module until a better way is found
  command: helm repo add jetstack https://charts.jetstack.io && helm repo update
  - k3s_support

- name: Install cert-manager into the kube-system namespace 
  # goign to do this via the command module until a better way is found
  command: helm install cert-manager jetstack/cert-manager --namespace kube-system
  tags:
  - k3s_support

- name: Configure lets-encrypt staging certificate issues
  k8s:
    state: present
    src: "../../{{ user }}/cert-issuer-stage.yml"
  tags:
  - k3s_support

- name: Configure lets-encrypt prod certificate issues
  k8s:
    state: present
    src: "../../{{ user }}/cert-issuer-prod.yml"
  tags:
  - k3s_support


- name: Create an NFS based persistentVolume
  k8s:
    state: present 
    api_version: v1
    apply: yes
    validate:
      fail_on_error: yes
      strict: no
    resource_definition: ../../../../rmengert/nfs-pv.yaml
  tags:
  - k3s_support


- name: Install the K8s dashboard
  # Note, the guide only walks you through using kube proxy to access the dashboard which restricts
  # the allowed source to localhost by design.  Need to investigate how to securely expose the dashboard
  # via a service for the purposes of the install script in order to be able to access the dashboard
  # from anywhere.