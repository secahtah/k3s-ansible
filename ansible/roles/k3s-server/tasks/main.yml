---
# tasks file for k3s-server
#
# This role is executed against the server in order to build it from scratch.
# Some of the operations that install helm charts get executed on the tools 
# server technically since that's where kubectl and helm are installed.  
# Those items will be duly noted here and there will have to be appropriate 
# tags on all of the task.
#
# This role does NOT assume that the first server node has been installed. It
# looks for the "is_first_node" is set; if it is set to "true" then it performs
# the installation on the first node (which other nodes will join later). If it
# is set to "false" it will look for that "first_node_IP_address" variable. 
# NOTE: If "is_first_node" is "false" and "first_node_IP_address" is null, the
# role fails to apply.
#
# This role assumes that the k3s server has at least given an IP address and 
# can reach the internet.
#
# Pass the user as an --extra-var to this playbook if you need to override that
# field.

  # on these Pis that are runnign Debian, we have to enable cgroups
- name: Append required string to /boot/cmdline.txt - Debian
  lineinfile:
    path: /boot/cmdline.txt
    backrefs: yes
    regexp: '^(?!.*cgroup_memory=1 cgroup_enable=memory)(.*)'
    line: '\1 cgroup_memory=1 cgroup_enable=memory'
    create: no
    backup: true
  register: cmdline_modification
  become: true
  when: ansible_facts['distribution'] == "Debian"
  notify: Reboot Server

- name: Detect if k3s is already installed
  ansible.builtin.systemd:
    name: "k3s"
  register: k3s_service_status
  become: true
  ignore_errors: true

- name: Set fact if k3s is already installed
  ansible.builtin.set_fact:
    k3s_installed: true
  when: 
    - "'status' in k3s_service_status"
    - "'UnitFileState' in k3s_service_status.status"
    - "k3s_service_status.status.UnitFileState == 'enabled'"

- name: Create folder structure for setup if they don't exist
  file: 
    path: "{{ item }}"
    state: directory
    owner: "{{ remote_user }}"
    group: "{{ remote_user }}"
  loop:
    - "/home/{{ remote_user }}/k3s-setup/certs/client"
    - "/home/{{ remote_user }}/k3s-setup/certs/ca"
    - "/home/{{ remote_user }}/k3s-setup/certs/server"
    - "/home/{{ remote_user }}/k3s-setup/files"
  when: 
    - ((k3s_installed == false) or (force == true))
  tags:
  - k3s_install 

#TODO: Some day, when I have "time," should work on calls to Vault to 
#      generate certs for this. For the k3s substrate however I honestly am fine
#      with a local CA
- name: Copy certs over
  copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
  loop:
    - src: client.key
      dest: "/home/{{ remote_user }}/k3s-setup/certs/client/client.key"
    - src: client.crt
      dest: "/home/{{ remote_user }}/k3s-setup/certs/client/client.crt"
    - src: ca.crt
      dest: "/home/{{ remote_user }}/k3s-setup/certs/ca/ca.crt"
    - src: server.crt
      dest: "/home/{{ remote_user }}/k3s-setup/certs/server/server.crt"
    - src: k3s-dbclient.key
      dest: "/home/{{ remote_user }}/k3s-setup/certs/client/k3s-dbclient.key"
    - src: k3s-dbclient.crt
      dest: "/home/{{ remote_user }}/k3s-setup/certs/client/k3s-dbclient.crt"
  when: 
    - ((k3s_installed == false) or (force == true))
  tags:
  - k3s_install 

- name: Set IPv4 and IPv6 address variables
  set_fact:
    ipv4_address: "{{ ansible_facts['eth0']['ipv4']['address'] }}"
    ipv6_address: "{{ ansible_facts['eth0']['ipv6'][0]['address'] }}"

- name: Concatenate IPv4 and IPv6 addresses
  set_fact:
    node_cidr: "{{ ipv4_address + ',' + ipv6_address }}"

- name: Run k3s server installer - 1st node
  ansible.builtin.shell: >
    curl -sfL https://get.k3s.io | sh -s - server
    --datastore-endpoint="postgres://k3s:{{ k3s_dbpass | urlquote }}@{{ k3s_dbhost }}:5432/k3s"
    --datastore-cafile="/home/{{ remote_user }}/k3s-setup/certs/ca/ca.crt"
    --token="{{ k3s_firstnode_token }}"
    --datastore-certfile="/home/{{ remote_user }}/k3s-setup/certs/client/k3s-dbclient.crt"
    --datastore-keyfile="/home/{{ remote_user }}/k3s-setup/certs/client/k3s-dbclient.key"
    --tls-san="{{ kubeapi_virtual_ipaddress }}"
    --cluster-cidr={{ cluster_cidr }}
    --service-cidr={{ service_cidr }}
    --node-ip={{ node_cidr }}
    --disable=servicelb
    --disable=traefik
    --https-listen-port={{ https_listen_port }}
  async: 3600
  poll: 10
  environment:
    K3S_KUBECONFIG_MODE: '644'
  tags:
  - k3s_install
  when: ((is_first_node == true) and ((k3s_installed == false) or (force == true)))

- name: Extract k3s token from first node
  slurp:
    src: /var/lib/rancher/k3s/server/token
  register: tmp_k3s_token
  become: true
  when: is_first_node == true

- name: Stash the k3s token in localhosts's variables
  set_fact:
    k3s_token: "{{ tmp_k3s_token['content'] | b64decode | trim }}"
  delegate_to: localhost
  delegate_facts: true
  when: is_first_node == true

- name: Lookup k3s token from localhost's variables
  set_fact:
    k3s_token: "{{ hostvars['localhost']['k3s_token'] }}"
  when: is_first_node == false

- name: Extract kubeconfig from 1st node
  slurp:
    src: /etc/rancher/k3s/k3s.yaml
  register: tmp_kubeconfig
  become: true
  when: is_first_node == true

- name: Set fact for kubeconfig
  set_fact:
    kubeconfig: "{{ tmp_kubeconfig['content'] | b64decode }}"
  delegate_to: localhost
  delegate_facts: true
  when: is_first_node == true

- name: Set fact for kubeconfig_local
  set_fact:
    kubeconfig_local: "{{ hostvars['localhost']['kubeconfig'] }}"
  when: is_first_node == true

- name: Make directory for kubeconfig file
  file: 
    path: "~/.kube"
    state: directory
    owner: "{{ remote_user }}"
    group: "{{ remote_user }}"
  delegate_to: localhost
  when: is_first_node == true

- name: Create kubeconfig file for user
  copy:
    content: "{{ kubeconfig_local }}"
    dest: ~/.kube/config
  delegate_to: localhost
  delegate_facts: true
  when: is_first_node == true

- name: Edit kubeconfig file for user - IP address
  ansible.builtin.replace:
    path: ~/.kube/config
    regexp: '127.0.0.1'
    replace: "{{ kubeapi_virtual_ipaddress }}"
  delegate_to: localhost
  when: is_first_node == true

- name: Edit kubeconfig file for user - Port number
  ansible.builtin.replace:
    path: ~/.kube/config
    regexp: "{{ https_listen_port }}"
    replace: '6443'
  delegate_to: localhost
  when: is_first_node == true

- name: Run k3s server installer - nth node
  ansible.builtin.shell: >
    curl -sfL https://get.k3s.io | sh -s - server
    --datastore-endpoint="postgres://{{ k3s_dbuser }}:{{ k3s_dbpass | urlquote }}@{{ k3s_dbhost }}:5432/k3s"
    --datastore-cafile="/home/{{ remote_user }}/k3s-setup/certs/ca/ca.crt"
    --datastore-certfile="/home/{{ remote_user }}/k3s-setup/certs/client/k3s-dbclient.crt"
    --datastore-keyfile="/home/{{ remote_user }}/k3s-setup/certs/client/k3s-dbclient.key"
    --tls-san="{{ kubeapi_virtual_ipaddress }}"
    --cluster-cidr={{ cluster_cidr }}
    --service-cidr={{ service_cidr }}
    --node-ip={{ node_cidr }}
    --disable=servicelb
    --disable=traefik
    --https-listen-port={{ https_listen_port }}
    --token="{{ k3s_token }}"
  async: 3600
  poll: 10
  environment:
    K3S_KUBECONFIG_MODE: '644'
  tags:
  - k3s_install
  when: ((is_first_node == false) and ((k3s_installed == false) or (force == true)))
