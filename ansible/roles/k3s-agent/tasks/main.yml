---
# tasks file for k3s-agent
#
# This role is executed against the agent in order to build it from scratch.
# Some of the operations that install helm charts get executed on the tools 
# server technically since that's where kubectl and helm are installed.  
# Those items will be duly noted here and there will have to be appropriate 
# tags on all of the task.
#
# This role assumes that at least one k3s server has been installed and the
# kubeapi-server is available. Because of this, it checks to see if the 
# caller has properly defined the "kubeapi_virtual_ipaddress" variable, and will
# fail if not.
#
- name: Bail if they didn't set values correctly
  fail: 
    msg: Override the values of kubeapi_virtual_ipaddress
  when: kubeapi_virtual_ipaddress is not defined

- name: Detect if k3s is already installed
  ansible.builtin.systemd:
    name: "k3s-agent"
  register: k3s_service_status
  become: true
  ignore_errors: true

- name: Set fact if k3s is already installed
  ansible.builtin.set_fact:
    k3s_installed: true
  when: 
    - "'status' in k3s_service_status"
    - "'UnitFileState' in k3s_service_status.status"
    - "k3s_service_status.status.UnitFileState == 'enabled'"

- name: Create folder structure for setup if they don't exist
  file: 
    path: "{{ item }}"
    state: directory
    owner: "{{ remote_user }}"
    group: "{{ remote_user }}"
  loop:
    - "/home/{{ remote_user }}/k3s-setup/certs/client"
    - "/home/{{ remote_user }}/k3s-setup/certs/ca"
    - "/home/{{ remote_user }}/k3s-setup/certs/server"
    - "/home/{{ remote_user }}/k3s-setup/files"
  when: 
    - ((k3s_installed == false) or (force == true))
  tags:
  - k3s_install 

#TODO: Some day, when I have "time," should work on calls to Vault to 
#      generate certs for this. For the k3s substrate however I honestly am fine
#      with a local CA
- name: Copy certs over
  copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
  loop:
    - src: client.key
      dest: "/home/{{ remote_user }}/k3s-setup/certs/client/client.key"
    - src: client.crt
      dest: "/home/{{ remote_user }}/k3s-setup/certs/client/client.crt"
    - src: ca.crt
      dest: "/home/{{ remote_user }}/k3s-setup/certs/ca/ca.crt"
    - src: server.crt
      dest: "/home/{{ remote_user }}/k3s-setup/certs/server/server.crt"
    - src: k3s-dbclient.key
      dest: "/home/{{ remote_user }}/k3s-setup/certs/client/k3s-dbclient.key"
    - src: k3s-dbclient.crt
      dest: "/home/{{ remote_user }}/k3s-setup/certs/client/k3s-dbclient.crt"
  when: 
    - ((k3s_installed == false) or (force == true))
  tags:
  - k3s_install 

- name: Set IPv4 and IPv6 address variables
  set_fact:
    ipv4_address: "{{ ansible_facts['eth0']['ipv4']['address'] }}"
    ipv6_address: "{{ ansible_facts['eth0']['ipv6'][0]['address'] }}"

- name: Concatenate IPv4 and IPv6 addresses
  set_fact:
    node_cidr: "{{ ipv4_address + ',' + ipv6_address }}"


### Not working! need to normalize parameters with k3s-server
- name: Run k3s agent installer
  ansible.builtin.shell: >
    curl -sfL https://get.k3s.io | sh -s - 
    --node-ip={{ node_cidr }}
  async: 3600
  poll: 10
  environment:
    K3S_KUBECONFIG_MODE: '644'
    K3S_URL: "https://{{ kubeapi_virtual_ipaddress }}:6443"
    K3S_TOKEN: "{{ k3s_token }}"
  when: 
    - ((k3s_installed == false) or (force == true))
  tags:
  - k3s_install

    # curl -sfL https://get.k3s.io | sh -s - server
    # --datastore-endpoint="postgres://{{ k3s_dbuser }}:{{ k3s_dbpass | urlquote }}@{{ k3s_dbhost }}:5432/k3s"
    # --datastore-cafile="/home/{{ remote_user }}/k3s-setup/certs/ca/ca.crt"
    # --datastore-certfile="/home/{{ remote_user }}/k3s-setup/certs/client/k3s-dbclient.crt"
    # --datastore-keyfile="/home/{{ remote_user }}/k3s-setup/certs/client/k3s-dbclient.key"
    # --tls-san="{{ tls_san }}"
    # --cluster-cidr={{ cluster_cidr }}
    # --service-cidr={{ service_cidr }}
    # --node-ip={{ node_cidr }}
    # --disable=servicelb
    # --disable=traefik
    # --https-listen-port={{ https_listen_port }}
    # --token="{{ k3s_token }}"

    # --datastore-endpoint="postgres://{{ k3s_dbuser }}:{{ k3s_dbpass | urlquote }}@{{ k3s_dbhost }}:5432/k3s"
    # --datastore-cafile="/home/{{ remote_user }}/k3s-setup/certs/ca/ca.crt"
    # --datastore-certfile="/home/{{ remote_user }}/k3s-setup/certs/client/k3s-dbclient.crt"
    # --datastore-keyfile="/home/{{ remote_user }}/k3s-setup/certs/client/k3s-dbclient.key"
    # --cluster-cidr={{ cluster_cidr }}
    # --service-cidr={{ service_cidr }}
