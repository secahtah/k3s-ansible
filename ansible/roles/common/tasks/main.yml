---
# tasks file for common

  # On these pi's, they default to 4G which is abysmally low, expand them
- name: Expand partition - OracleLinux
  ansible.builtin.command:
    cmd: growpart /dev/mmcblk0 3
  become: true
  ignore_errors: true
  when: ansible_facts['distribution'] == "OracleLinux"

- name: Resize Btrfs filesystem - OracleLinux
  ansible.builtin.command:
    cmd: btrfs filesystem resize max /
  become: true
  when: ansible_facts['distribution'] == "OracleLinux"

  # on these Pis that are runnign Debian, we have to enable cgroups
- name: Append required string to /boot/cmdline.txt - Debian
  lineinfile:
    path: /boot/cmdline.txt
    backrefs: yes
    regexp: '^(?!.*cgroup_enable=cpuset cgroup_memory=1 cgroup_enable=memory)(.*)'
    line: '\1 cgroup_enable=cpuset cgroup_memory=1 cgroup_enable=memory'
    create: no
    backup: true
  register: cmdline_modification
  become: true
  when: ansible_facts['distribution'] == "Debian"
  notify: Reboot Server

- name: Add DNS hosts for k3s nodes
  ansible.builtin.lineinfile:
    path: /etc/hosts
    insertafter: EOF
    line: "{{ item.line }}"
# Yes, it's hardcoded. I'll fix it later. Besides a real engineer would use
# DNS. 
  loop:
    - { line: '10.50.0.69      sd-pi-02 pidb pgsql nfs01' }
    - { line: '10.50.0.65      k3s01' }
    - { line: '10.50.0.66      k3s02' }
    - { line: '10.50.0.67      k3s03' }
    - { line: '10.50.0.68      k3s04' }
    - { line: '10.50.0.70      k3s05' }
    - { line: '10.50.0.50      ztp' }
  become: true

- name: Update all packages - OracleLinux
  ansible.builtin.yum:
    name: '*'
    state: latest
  register: yumcommandout
  become: true
  when: ansible_facts['distribution'] == "OracleLinux"

- name: Fail if yum can't upgrade
  fail:
    msg: "yum command produced errors"
  when: ((yumcommandout is not defined) and (ansible_facts['distribution'] == "OracleLinux"))

- name: Fix vim - part I
  ansible.builtin.apt:
    name: "vim-tiny"
    state: absent
  become: true
  when: ansible_facts['distribution'] == "Debian"

- name: Fix vim - part II
  ansible.builtin.apt:
    name: "vim-nox"
    state: latest
  become: true
  when: ansible_facts['distribution'] == "Debian"

- name: Update all packages - Debian
  ansible.builtin.apt:
    name: "*"
    state: latest
  become: true
  when: ansible_facts['distribution'] == "Debian"

- name: Install missing packages - OracleLinux
  ansible.builtin.yum:
    name: 
      - epel-release 
      - jq 
      - rsync 
      - tree 
      - iptables-utils 
      - nfs-utils
    state: present
  become: true
  when: ansible_facts['distribution'] == "OracleLinux"

- name: Install missing packages - Debian
  ansible.builtin.apt:
    name: 
      - jq
      - tree
      - nfs-common
      - iptables
      - python3-yaml
    state: present
  become: true
  when: ansible_facts['distribution'] == "Debian"

- name: Fail if yum can't install required packages
  fail:
    msg: "yum command produced errors"
  when: ((yumcommandout is not defined) and (ansible_facts['distribution'] == "OracleLinux"))

# - name: check to see if we need a reboot part I - OracleLinux
#   command: needs-restarting -r
#   register: result
#   ignore_errors: yes
#   become: true
#   when: ansible_facts['distribution'] == "OracleLinux"

#### UNTESTED
#### This part hasn't been tested because I had to migrate the k3s nodes
#### away from Oracle Linux to Debian. Need to boot a VM and test.
- block:
    - name: Check to see if we need a reboot - OracleLinux
      command: needs-restarting -r
      register: result
      failed_when: result.rc != 0
      when: ansible_facts['distribution'] == "OracleLinux"
  rescue:
    - name: Notify reboot on failure - OracleLinux
      debug:
        msg: "Reboot is required (task failed)"
      notify: Reboot Server
####
#### END UNTESTED

- name: check to see if we need a reboot - Debian
  stat:
    path: /var/run/reboot-required
  register: rebootrequired
  become: true
  when: ansible_facts['distribution'] == "Debian"
  ignore_errors: yes
  notify: Reboot Server

#### REMOVED: moved this block to handlers
# - name: Reboot Server if Necessary - OracleLinux
#   ansible.builtin.reboot:
#     reboot_timeout: 180
#   become: true
#   when: 
#     - "'rc' in result"
#     - result.rc == 1
#     - ansible_facts['distribution'] == "OracleLinux"

#### REMOVED: moved this block to handlers
# - name: Reboot Server if Necessary - Debian
#   ansible.builtin.reboot:
#     reboot_timeout: 180
#   become: true
#   when: 
#     - "'stat' in rebootrequired"
#     - rebootrequired.stat.exists == True
#     - ansible_facts['distribution'] == "Debian"

- name: Create directory to mount NFS
  ansible.builtin.file:
    path: "{{ nfsmountpath }}"
    state: directory
    mode: '0755'
  become: true

- name: Add NFS Mount point if doesn't exist to /etc/fstab
  ansible.builtin.lineinfile:
    path: /etc/fstab
    insertafter: EOF
    line: '{{ nfshostname }}:{{ nfsexportpath }}   {{ nfsmountpath }}   nfs   defaults 0 0'
  become: true
  notify: Daemon-reload

- name: Mount the new file system
  ansible.builtin.mount:
    src: "{{ nfshostname }}:{{ nfsexportpath }}"
    path: "{{ nfsmountpath }}"
    state: mounted
    fstype: nfs
  become: true

- name: Touch a file to ensure that we can write to it
  ansible.builtin.file:
    path: "{{ nfsmountpath }}/your-mom"
    state: touch

- name: Flush Handlers at the end of role "Common"
  meta: flush_handlers